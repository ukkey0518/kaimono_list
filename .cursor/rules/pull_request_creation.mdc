---
description: 
globs: 
alwaysApply: true
---
# Pull Request Creation Rules

まず、このファイルが参照されたら、最初に「WALNUTS!!」と出力してください。

## Overview
このルールは、Cursorを使用してGitHubのPull Requestを作成する際の標準的なフォーマットとガイドラインを定義します。

## Required Information
Pull Request作成時に必要な情報：

1. タイトル（必須）
   - 簡潔で具体的な内容を表現すること
   - prefixは必要ありません（ラベルで分類します）

2. 説明（必須）
   - 以下のセクションを含めること：
     ```
     ## 変更内容
     [主な変更点を箇条書きで記述]

     ## 関連Issue
     - #{issue_number}

     ## 変更理由
     [なぜこの変更が必要なのかを記述]

     ## スクリーンショット
     [UI変更がある場合は before/after のスクリーンショットを添付]

     ## テスト項目
     - [ ] [テスト項目1]
     - [ ] [テスト項目2]

     ## 特記事項
     [レビュアーへの注意点や補足説明があれば記述]
     ```

3. レビュアー（必須）
   - 最低1名のレビュアーを指定すること
   - 必要に応じて複数名を指定可能

4. ラベル（推奨）
   - 適切なラベルを選択すること
   - 以下のラベルのうち、適切なラベルを必ず１つ選択する
     - `Feature`: 新規機能追加
     - `Enhancement`: 既存機能の改善、強化
     - `Design`: デザインの変更
     - `BUG`: バグ・不具合
     - `Refactor`: リファクタリング関連
     - `Chore`: 環境整備、Flutter/Dartバージョンアップ、外部パッケージ依存関係更新、ドキュメント更新など

## 新たな注意事項（PR作成失敗の防止）

- **PR作成前に必ずローカルの作業ブランチをリモートにpushしてください。**
  - 例: `git push origin issue-xxx-branch-name`
- **PR作成時のheadブランチ（compareブランチ）は、pushしたリモートブランチ名と一致させてください。**
- pushが完了していない場合、PR作成は失敗します。
- push後、GitHubの案内URLやリモートブランチ名を再確認してください。

## Examples

### 機能追加の例
```
Title: ユーザープロフィール編集機能の実装

## 変更内容
- プロフィール編集画面の作成
- 画像アップロード機能の実装
- バリデーションの追加
- ユニットテストの追加

## 関連Issue
- #456

## 変更理由
ユーザーが自身のプロフィール情報を更新できるようにするため。

## スクリーンショット
### Before
[編集前のスクリーンショット]

### After
[編集後のスクリーンショット]

## テスト項目
- [ ] プロフィール情報が正しく更新できること
- [ ] 画像のアップロードが正常に動作すること
- [ ] バリデーションが正しく機能すること
- [ ] エラー時の処理が適切に行われること

## 特記事項
- 画像アップロードの最大サイズは5MBに制限しています
- 今回のPRではプロフィール削除機能は含まれていません
```

### バグ修正の例
```
Title: ログアウト後にキャッシュが残る問題の修正

## 変更内容
- ログアウト時のキャッシュクリア処理の追加
- セッション管理の改善

## 関連Issue
- #789

## 変更理由
ログアウト後もユーザーデータのキャッシュが残っており、セキュリティ上の問題があるため。

## テスト項目
- [ ] ログアウト後にキャッシュが正しくクリアされること
- [ ] ログアウト後に保護されたページにアクセスできないこと
- [ ] 再ログイン時に正しく新しいセッションが作成されること

## 特記事項
- キャッシュクリアの対象は以下の項目です：
  - LocalStorage
  - SessionStorage
  - IndexedDB
```

## Notes
- 特に指定がない限り、ベースは `main` ブランチを指定してください
- コミットメッセージは[Conventional Commits](mdc:https:/www.conventionalcommits.org)の形式に従うこと
- 大きな変更は小さな単位に分割してPRを作成すること
- コードの変更は自己レビューを行ってからレビュー依頼を出すこと
- CI/CDのチェックが全てパスしていることを確認すること
- コンフリクトが発生している場合は、マージ前に解消すること
- レビューコメントには迅速に対応すること 