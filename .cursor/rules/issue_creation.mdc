---
description: 
globs: 
alwaysApply: true
---
# Issue Creation Rules

## 0. はじめに
- このファイルが参照されたら、最初に「ROMAINE LETTUCE!!」と出力してください。

## 1. 概要
このルールは、Cursorを使用してGitHubのIssueを作成する際の標準的なフォーマットとガイドラインを定義します。  
課題・背景・目的の明確化、改修内容の具体化、承認フローを重視します。

---

## 2. Issue作成プロセス

### 2.1 課題・背景・目的の整理と承認

1. **課題・背景のヒアリングと明確化**
   - まず、今回のIssueで「何に困っているのか」「なぜ対応が必要なのか」を明確にします。
   - 回答者から課題や背景が提示されていない場合は、必ずヒアリングを行い、具体的な状況や困りごとを引き出してください。
   - ヒアリング例：
     - 「どのような問題・不便が発生していますか？」
     - 「現状の運用やシステムで困っている点は何ですか？」
     - 「なぜ今この対応が必要なのでしょうか？」
   - 回答内容が抽象的な場合は、さらに深掘りして具体的な事象や影響範囲を明らかにしてください。
     - 例：「それはどの画面・機能で発生していますか？」「どのくらいの頻度で起きていますか？」

2. **目的の明確化と仮案提示**
   - 課題・背景が整理できたら、「このIssueで最終的にどうなれば良いか（目的）」を明確にします。
   - 目的が回答者から提示されていない場合は、課題・背景から推測し、仮の目的案を提示してください。
     - 例：「このIssueの目的は、○○の問題を解消し、△△ができるようにすることで間違いないでしょうか？」
   - 目的が複数ある場合や曖昧な場合は、優先順位や本質的なゴールを整理してください。

3. **情報の整理と承認プロセス**
   - ヒアリングした課題・背景・目的を、実装可能なレベルまで具体的に整理します。
     - 例：「現状、A画面でBの不具合があり、ユーザーがCできない。これをDのように改善したい、という理解で合っていますか？」
   - 整理した内容を回答者に確認し、「この内容で間違いないか」必ず承認を得てください。
   - 承認が得られるまで、必要に応じてヒアリング・再整理を繰り返してください。

4. **記録・共有**
   - 整理・承認した課題・背景・目的は、Issue本文の「概要」「背景・目的」欄に簡潔かつ具体的に記載してください。
   - 必要に応じて、関連資料やスクリーンショットも添付し、第三者が見ても状況が理解できるようにします。

---

### 2.2 改修内容の具体化と承認

1. **改修ポイントのヒアリングと仮説提示**
   - どのあたりが今回の改修の中心となるか、ざっくりで良いので回答者にヒアリングしてください。
     - 例：「今回の改修で一番中心となる箇所はどこでしょうか？」
     - 例：「特に困っている画面や機能、優先的に直したい部分はありますか？」
   - 回答が得られない場合は、プロジェクトの仕様や現状を調査し、推測した中心ポイントを仮説として提示してください。
     - 例：「現状のコードや運用から推測すると、A画面のB機能が中心になると考えていますが、いかがでしょうか？」

2. **現行実装の把握とギャップ分析**
   - 中心となる改修箇所が判明したら、必ず現行の実装内容を確認してください。
     - 関連するファイル・クラス・関数・画面・APIなどを調査し、どのような実装が行われているか把握します。
     - 例：「A画面のB機能は、CクラスのDメソッドで実装されています。」
   - 現行実装と課題・目的を比較し、どこにギャップや問題があるかを明確にしてください。
     - 例：「現状はXのため、Yができない状態です。」

3. **具体的な改修内容の提示と合意**
   - ギャップを埋めるための具体的な改修内容（やるべき作業・修正方針）を提示してください。
     - 例：「CクラスのDメソッドにEの処理を追加し、F画面でGができるようにします。」
     - 例：「既存のHロジックをIに変更し、Jの不具合を解消します。」
   - 必要に応じて、改修範囲・対象外範囲・影響範囲・考慮点（UI/UX・パフォーマンス・セキュリティ等）も明記してください。
   - 回答者に「この内容で問題ないか」必ず承認を得てください。
     - 例：「この改修方針で進めてよいでしょうか？」

4. **記録・共有**
   - 承認された改修内容は、Issue本文の「詳細」欄に具体的かつ簡潔に記載してください。
   - 必要に応じて、関連資料や参考コード、画面キャプチャ等も添付し、第三者が見ても内容が理解できるようにします。

---

### 2.3 Issueの作成

- 上記の承認が得られたら、以下のフォーマットでIssueを作成してください。

#### Issueフォーマット

```
Title: [50文字以内で簡潔に]

## 概要
[課題・背景・目的を踏まえた要約]

## 背景・目的
[ヒアリング・推測に基づく背景と目的]

## 詳細
[現行実装の説明、課題とのギャップ、具体的な改修内容]

## 受け入れ基準
- [ ] [具体的な完了条件1]
- [ ] [具体的な完了条件2]
```

- **ラベル**：下記から必ず1つ選択
  - `Feature`（新規機能追加）
  - `Enhancement`（既存機能の改善・強化）
  - `Design`（デザイン変更）
  - `BUG`（バグ・不具合）
  - `Refactor`（リファクタリング）
  - `Chore`（環境整備・依存更新・ドキュメント等）

- **アサイン**：担当者が決まっていれば指定

---

## 3. 注意事項

- ownerは"ukkey0518"
- 特に指定がなければ、現在のRepositoryに対してIssueを作成
- 全ての情報は日本語で記述
- タイトルは50文字以内推奨
- 説明は簡潔かつ具体的に
- スクリーンショットや補助資料があれば添付

---

## 4. 例

### バグ修正の例

```
Title: 商品一覧画面で在庫数が正しく表示されない不具合の修正

## 概要
商品一覧画面にて、在庫数が実際の在庫と異なる値で表示される不具合が発生しているため、正しい在庫数が表示されるよう修正する。

## 背景・目的
- 現状、商品一覧画面で表示される在庫数が、管理画面で登録した在庫数と一致しないケースが複数報告されている。
- ユーザーから「在庫があるはずの商品が購入できない」「在庫切れ表示なのに実際は在庫がある」といった問い合わせが増加している。
- このままでは販売機会の損失やユーザー体験の低下につながるため、早急な対応が必要。

## 詳細
- 課題発生箇所：商品一覧画面（/products）
- 現行実装：在庫数は`ProductListViewModel`の`fetchProducts`メソッドでAPIから取得し、画面に表示している。
- ギャップ：APIレスポンスの`stock`値が正しく反映されていない。特に、在庫数が0の場合に「在庫あり」と表示されるケースがある。
- 原因調査：`ProductListViewModel`内で、APIレスポンスの`stock`がnullの場合にデフォルト値1をセットしている実装があった。
- 改修内容：
  - `ProductListViewModel`の`fetchProducts`メソッドで、`stock`がnullの場合は0をセットするよう修正。
  - 在庫数が0の場合は「在庫切れ」と表示し、1以上の場合はその数値を表示するロジックに統一。
  - 単体テスト・画面テストを追加し、全パターンで正しく表示されることを確認。

## 受け入れ基準
- [ ] 商品一覧画面で、在庫数がAPIの値と常に一致して表示される
- [ ] 在庫数が0の場合は「在庫切れ」と表示される
- [ ] 在庫数が1以上の場合はその数値が表示される
- [ ] テストコードが追加されている
- [ ] 管理画面で在庫数を変更した場合も即時反映される
```

---

### 機能追加の例

```
Title: ユーザー退会機能の追加

## 概要
ユーザーが自身のアカウントを削除できる「退会」機能を追加する。

## 背景・目的
- 現状、ユーザーが退会を希望した場合、管理者が手動でDBから削除している。
- ユーザー自身で退会操作を完結できるようにし、運用負荷とセキュリティリスクを低減したい。

## 詳細
- 退会ボタンを「アカウント設定」画面に追加
- 退会時は確認ダイアログを表示し、同意後に退会処理を実行
- 退会処理は`DELETE /users/{id}`APIを呼び出し、ユーザーデータを論理削除
- 退会後は自動的にログアウトし、トップページにリダイレクト
- 退会理由の選択（任意）を追加し、管理者向けに記録
- 退会処理のユニットテスト・E2Eテストを実装

## 受け入れ基準
- [ ] アカウント設定画面に退会ボタンが表示されている
- [ ] 退会時に確認ダイアログが表示される
- [ ] 退会後、ユーザー情報が論理削除されている
- [ ] 退会理由が管理者画面で確認できる
- [ ] 退会後は自動的にログアウトし、トップページに遷移する
- [ ] テストコードが追加されている
```

---

## 5. 備考

- 必ず「課題・背景・目的」「改修内容」の承認を得てからIssueを作成すること
- 情報が不足している場合はヒアリング・調査を徹底すること
- Issue作成後も、必要に応じて内容を更新・追記すること
