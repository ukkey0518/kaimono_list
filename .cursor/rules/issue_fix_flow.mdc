---
description: |
  Issue改修タスクの標準フロー。A. 準備フェーズ→B. 改修フェーズ→C. 確認フェーズの3段階で進行し、各フェーズでの具体的な手順・注意事項を記載。
globs: 
alwaysApply: true
---
# Issue改修フロー

---

#### 【厳重注意】コミット前の確認徹底について

> **重要：コミット前に必ず内容確認・承認を得ること**
> 本プロジェクトでは、**コミット前に必ず内容確認と承認を得ること**を絶対ルールとします。
> いかなる場合も、**回答者の明示的な承認がない限り、コミット・プッシュ等の操作を行ってはなりません**。
> このルールを怠ると、重大な障害や取り返しのつかない損失につながる恐れがあります。
> 万が一、確認を怠りコミット等を実施した場合は、即時報告の上、再発防止策を講じてください。
> **再発防止のため、以下を厳守してください：**
> - コミット前に必ず「内容確認・承認」を得る
> - 承認があるまで、いかなるGit操作も行わない
> - 万一ルール違反が発生した場合は、速やかに報告し、原因と再発防止策を明記する
> **このルールはプロジェクトの安全・信頼性を守るための最重要事項です。絶対に徹底してください。**

---

まず、このファイルが参照されたら、最初に「WILD RICE!!」と出力してください。

## Overview
このルールは、Issueに基づく改修作業を「A. 準備フェーズ」「B. 改修フェーズ」「C. 確認フェーズ」の3段階で進める標準的なフローとガイドラインを定義します。

---

## フェーズ一覧

### A. 準備フェーズ

- **A.1：Issueの内容の確認**
  - mcpを使って対象Issueを取得し、以下の観点で内容を詳細に確認する
    - 概要・背景・目的・詳細・受け入れ基準が明確か
    - 受け入れ基準が具体的かつテスト可能な形で記載されているか
    - 技術的な制約や前提条件、関連Issue・関連機能の有無
    - 実装方針や期待される動作、UI/UX要件、非機能要件（パフォーマンス・セキュリティ等）
    - テスト観点（ユニット・結合・E2E等）が明記されているか
  - 不明点や不足情報があれば、回答者にヒアリングし、Issue本文をmcpで修正・更新
    - ヒアリング内容・決定事項は必ずIssue本文に反映
    - 必要に応じて再確認を繰り返し、Issue情報の精度を高める
  - 最終的に、このIssueで行う具体的な変更内容（作業範囲・対象ファイル・影響範囲・除外事項など）を整理し、回答者に提示
    - 例：「このIssueではA機能のB部分のみを改修対象とし、C部分は対象外とします」など
  - 回答者から「開始してよい」と明示的な承認を得てから次工程へ進む

- **A.2：mainブランチへのチェックアウトと最新化**
  - ローカルリポジトリでmainブランチへチェックアウト
  - `git pull origin main`で最新状態に更新
  - 必要に応じて、依存パッケージやツールのバージョンも最新化

- **A.3：作業ブランチの作成**
  - ブランチ命名規則：`issue-{番号}-{簡単な説明}`（例：`issue-123-fix-login-bug`）
  - mainブランチから新規作業ブランチを作成
  - ブランチ作成後、正しく切り替わっているか確認

- **A.4：環境準備**
  - `make setup`等で依存パッケージのセットアップや再取得を行う
  - Flutterプロジェクトの場合は`flutter pub get`も実行
  - .env等の環境変数ファイルが必要な場合は内容を確認・整備
  - 開発・ビルド・テストが正常に行えるか、最低限の動作確認を実施

### B. 改修フェーズ

- **B.1：改修計画の提示**
  - このB1〜B3の1ループで「どの作業・修正を行うか」を具体的に提示する
    - 例：「ログイン画面のバリデーション追加のみをこのループで対応します」など
  - その作業の対象ファイル・影響範囲・考慮点（UI/UX・パフォーマンス・セキュリティ等）があれば明記
  - 必要に応じて、作業の順序や依存関係も整理
  - 回答者に「今回の作業内容」を提示し、承認を得てからB.2へ進む
  - ※全体の修正内容・範囲は準備フェーズで既に合意済みのため、ここでは繰り返し記載しない

- **B.2：変更**
  - 承認された計画に基づき、1コミット単位ごとに改修作業を進める
  - 変更内容は、計画で示した粒度・範囲を厳守し、不要な差分を出さないよう注意する
  - 変更時のポイント（Flutterプロジェクトの場合）：
    - モデル定義はfreezedを使用し、既存モデルを参考にする
    - データのUI表示はriverpodのAsyncProviderを使う（AsyncValue.whenは使わず、switch式やisLoading等の変数を使う）
    - UI状態管理はHooksを使う（特別な理由がない限りRiverpodやStatefulWidgetは使わない）
    - `.g.dart`や`.freezed.dart`等の自動生成ファイルが変更された場合は`make genb`で再生成
  - 変更が一通り終わったら、以下を必ず実施する
    - `flutter analyze`で静的解析エラーの有無を確認し、全て修正
    - `make cleanup`でLint/フォーマットを実施
    - 変更内容が計画通りか、不要な差分が含まれていないか再確認
    - テストコードが必要な場合は追加・修正し、テストが全て成功することを確認
    - 影響範囲が広い場合は、関連機能の動作確認も行う

- **B.3：コミット**
  - 1コミット単位で、未コミット差分を確認し、@Conventional Commits形式でコミットメッセージを作成
    - 例：`fix(login): バリデーションエラー時のメッセージ表示修正`
  - 変更内容・コミット内容を回答者に提示し、コミット可否の承認を得る
  - 承認後にコミットを実施
  - 追加作業がある場合はB.1へ戻り、なければC. 確認フェーズへ進む

### C. 確認フェーズ

- **C.1：flutter analyze**
  - `flutter analyze`を実行し、静的解析エラーがすべて解消されていることを確認する
  - エラーや警告が出た場合は、必ず修正し、再度`flutter analyze`を実行してエラーがない状態にする

- **C.2：make cleanup**
  - `make cleanup`を実行し、Lintエラーやフォーマットの乱れを修正する
  - コードスタイルや命名規則など、プロジェクトのコーディング規約に沿っているか再確認する

- **C.3：差分・PR内容の整理**
  - mainブランチとの差分を`git diff main...`等で確認し、不要な差分や意図しない変更が含まれていないかチェックする
  - 変更内容・PRに含めるべきポイントを整理し、PR説明文の下書きを作成する
  - 受け入れ基準・テスト観点がすべて満たされているか、動作確認・テスト結果を再度確認する
  - 必要に応じて、スクリーンショットや補足資料を準備する

- **C.4：PR作成**
  - 回答者にPR作成の承認を得る
  - `pull_request_creation.mdc`のルールに従い、PRタイトル・説明・レビュアー・ラベル等を正しく記載してPRを作成する
  - PR作成前に、必ずローカルの作業ブランチをリモートにpushしておく
  - PR作成後、GitHub上で内容を最終確認し、必要に応じて追加説明や資料を添付する

---

## 備考
- すべてのフェーズで「必ず回答者の承認を得てから次の工程へ進む」こと
- Flutter開発時のモデル・状態管理・UI表示のルールを厳守すること
- コミット・PR作成時は@Conventional Commits、PRテンプレートに従うこと
- 詳細なIssue作成・PR作成ルールはそれぞれ`issue_creation.mdc`、`pull_request_creation.mdc`を参照
