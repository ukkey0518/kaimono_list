rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // * Check if the user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // * Check if the user is logged in as the specified user
    function isLoggedInAs(userId) {
      return request.auth.uid == userId;
    }

    // * Check if the user is logged in as any of the specified users
    function isAnyLoggedInAs(userIds) {
      return userIds.hasAny([request.auth.uid]);
    }

    match /user_profiles/{userId} {
      allow read, update: if isLoggedInAs(userId);
    }
    
    match /shopping_sheets/{shoppingSheetId} {
      // * Check if the user is the owner of the shopping sheet
      function isLoggedInAsShoppingSheetOwner() {
        return isLoggedInAs(resource.data.ownerUserId);
      }

      // * Check if the user is a member of the shopping sheet
      function isLoggedInAsShoppingSheetMember() {
        return isAnyLoggedInAs(resource.data.memberUserIds);
      }

      allow create: if isAuthenticated();
      allow read, update: if isLoggedInAsShoppingSheetOwner() || isLoggedInAsShoppingSheetMember();
      allow delete: if isLoggedInAsShoppingSheetOwner();
    }

    match /items/{itemId} {
      allow read, write: if isAuthenticated();
    }
  }
}