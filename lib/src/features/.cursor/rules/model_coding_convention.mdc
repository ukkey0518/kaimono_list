---
description: 
globs: 
alwaysApply: false
---
# モデルファイル コーディング規則（lib/src/features/**/domain/ 配下）

## 1. 命名・配置
- モデルごとに1ファイル（例: `shopping_item.dart`）で定義し、`domain`ディレクトリに配置する。
- ファイル名・クラス名はスネークケース/パスカルケースで統一し、機能・役割が明確になるよう命名する。

## 2. Freezedによる定義
- モデルは必ず`freezed`パッケージを用いて定義する。
  - `@freezed`アノテーションを付与し、`abstract class Xxx with _$Xxx`で宣言する。
  - `const factory Xxx({...}) = _Xxx;`でイミュータブルなファクトリコンストラクタを定義する。
  - 必要に応じて`const Xxx._();`のプライベートコンストラクタも定義する。
- `part 'xxx.freezed.dart';`および`part 'xxx.g.dart';`（json対応時）を必ず記述する。

## 3. Firestoreモデル用アノテーション
- Firestoreモデルにはlib/src/utils/annotations/firestore_annotations.dartのアノテーションを利用する。
  - `@firestoreModel`（モデル全体に付与）
  - `@firestoreId`（id: String?）
  - `@firestoreCreatedAt`（createdAt: DateTime?）
  - `@firestoreUpdatedAt`（updatedAt: DateTime?）
  - `FirestoreTimestamp`/`FirestoreTimestampN`（createdAt/updatedAt以外のDateTime型パラメータに付与）

## 4. nullable・デフォルト値のルール
- Firestoreモデルは、すべてのパラメータをnullable（?）または`@Default`のどちらかで定義すること。
  - ※スキーマレスな特性上、項目の追加・削除・未設定が発生しうるため、nullや未設定を許容しないとJson変換時の予期せぬエラーやデータ不整合が発生するリスクがあるため。
- `@Default`を使える条件は以下
  - そのパラメータのデフォルト値があらかじめ決まっている場合
  - そのパラメータの型がサブモデルである場合（ただしサブモデルのパラメータがnull想定パラメータの場合は除く）。サブモデルのデフォルト値は引数なしとする
- それ以外はすべてnullableとする

## 5. requiredのルール
- 4のルールにより、すべてがnullableや@Defaultだと「想定しないnull」と「正常系として許容するnull」の区別がつかなくなるため、
  - 本来nullになることがあり得ないパラメータには`required`を付与して明示する。
  - 正常系としてnullや未設定が許容される場合（未設定や省略があり得る項目）は`required`を付けない。

## 6. 必須プロパティ
- Firestoreで扱う全モデルは、必ず以下のプロパティを含めること。
  - `id`（String?）: @firestoreId
  - `createdAt`（DateTime?）: @firestoreCreatedAt
  - `updatedAt`（DateTime?）: @firestoreUpdatedAt

## 7. Jsonシリアライズ
- FirestoreやAPI連携が必要な場合は、`fromJson`/`toJson`を定義し、`part 'xxx.g.dart';`を追加する。
- `factory Xxx.fromJson(Map<String, dynamic> json) => _$XxxFromJson(json);`の形式で記述する。

## 8. ドキュメンテーション
- 各プロパティやクラスにはDartDocコメント（`///`）を付与し、役割や仕様を明記する。

## 9. サブモデル・ファイル分割
- サブモデル（例: `ShoppingItemCreateUser`）も同様にfreezedで定義し、親モデルのプロパティとして持たせる。
- そのモデルファイルからのみ参照されるサブモデルは同じファイル内に定義。
- 同一feature内の複数モデルから参照される場合は、同一featureの`domain`ディレクトリ内でファイルを分離。
- 複数featureから参照される場合は、`lib/src/utils`等の共通ディレクトリにファイルを分離。

## 10. 定数・バリデーション
- モデル固有の定数（例: `maxTitleLength`）は`static const`で定義する。
- バリデーションロジックは必要に応じてモデル内に静的メソッドやゲッターとして実装する。

## 11. 自動生成ファイル
- モデル定義を変更した場合は、必ず`make genb`等で`.freezed.dart`や`.g.dart`を再生成する。
- 自動生成ファイルは手動で編集しない。

---

### 実装例（抜粋）

```dart
import 'package:freezed_annotation/freezed_annotation.dart';
import 'package:kaimono_list/src/utils/annotations/firestore_annotations.dart';

part 'sample_model.freezed.dart';
part 'sample_model.g.dart';

@freezed
abstract class SampleModel with _$SampleModel {
  @firestoreModel
  const factory SampleModel({
    required String? name,
    @Default(false) bool isActive,
    @firestoreId String? id,
    @firestoreCreatedAt DateTime? createdAt,
    @firestoreUpdatedAt DateTime? updatedAt,
  }) = _SampleModel;

  factory SampleModel.fromJson(Map<String, dynamic> json) =>
      _$SampleModelFromJson(json);

  const SampleModel._();
}
```
