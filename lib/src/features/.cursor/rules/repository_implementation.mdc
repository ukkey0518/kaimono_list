---
description: 
globs: 
alwaysApply: false
---
# lib/src/features Repository実装ルール

## 1. 命名・配置
- 各機能ごとに`data`ディレクトリを作成し、リポジトリクラスは`xxx_repository.dart`というファイル名で実装する。
  - 例: `shopping_item_repository.dart`, `auth_repository.dart`
- ドメイン層のモデルは`domain`ディレクトリに配置する。

## 2. クラス設計
- クラス名は`XxxRepository`とする。
- 必要な外部依存（例: FirebaseFirestore, FirebaseAuthなど）はコンストラクタインジェクションで受け取る。
- Firestore等のコレクション/ドキュメントパスは`static`メソッドで定義する。

## 3. メソッド設計
- データ取得は`fetchXxx`（Future）、監視は`watchXxx`（Stream）で命名を統一する。
- データ作成は`create`、更新は`updateXxx`、削除は`delete`で命名する。
- Firestoreのコレクション/ドキュメント参照は`collectionRef`/`documentRef`メソッドでラップする。
- Firestoreのデータ変換は`withConverter`を利用し、モデルの`fromJson`/`toJson`を使う。
  - 特にFirestoreの場合、`fromFirestore`では必ず`lib/src/utils/extensions/firestore_extensions.dart`の`dataWithId()`を使い、`id`を含めたデータをモデルに渡すこと。

## 4. Riverpod連携
- `@riverpod`（または`@Riverpod`）アノテーションを使い、Providerを定義する。
  - 例: `shoppingItemRepositoryProvider`, `authRepositoryProvider`
- Providerは`Ref`を受け取り、リポジトリインスタンスを返す。
- 必要に応じて、StreamやFutureを返すProviderも定義する。

## 5. その他
- Firestoreのバッチ処理やクエリは、専用のメソッドでラップする。
- ドキュメントIDやコレクションパスの組み立ては、必ずstaticメソッドで一元管理する。
- ドメインモデルとの変換は、必ずfromJson/toJsonを経由する。

## 6. 自動生成ファイルについて
- `@riverpod`や`@Riverpod`アノテーションを利用した場合、関連するProviderや型定義は`.g.dart`ファイルとして自動生成される。
- リポジトリやProviderの定義を変更した際は、必ず`make genb`等で自動生成ファイルを最新化すること。
- 自動生成ファイル（例: `xxx_repository.g.dart`）は手動で編集しない。
- コードレビューやコミット時は、自動生成ファイルの差分も必ず確認する。

---

### 実装例（抜粋）

```dart
class XxxRepository {
  const XxxRepository(this._firestore);
  final FirebaseFirestore _firestore;

  static String collectionPath() => 'xxx';
  static String documentPath(String id) => '${collectionPath()}/$id';

  CollectionReference<Xxx> collectionRef() => _firestore.collection(collectionPath()).withConverter(...);
  DocumentReference<Xxx> documentRef(String id) => _firestore.doc(documentPath(id)).withConverter(...);

  Future<List<Xxx>> fetchList() async { ... }
  Stream<List<Xxx>> watchList() { ... }
  Future<String> create({required Xxx xxx}) async { ... }
  Future<void> update({required String id, ...}) async { ... }
  Future<void> delete({required String id}) async { ... }
}

@riverpod
XxxRepository xxxRepository(Ref ref) => XxxRepository(FirebaseFirestore.instance);
```

---

### 備考
- Providerの命名やkeepAlive指定は用途に応じて調整する。
- Firestore以外のリポジトリも、同様の設計思想で実装する。